(set-logic LIA)

( declare-const a Int )
( declare-const a! Int )
( declare-const i Int )
( declare-const i! Int )
( declare-const n Int )
( declare-const n! Int )
( declare-const sn Int )
( declare-const sn! Int )

( declare-const a_0 Int )
( declare-const i_0 Int )
( declare-const i_1 Int )
( declare-const i_2 Int )
( declare-const i_3 Int )
( declare-const n_0 Int )
( declare-const sn_0 Int )
( declare-const sn_1 Int )
( declare-const sn_2 Int )
( declare-const sn_3 Int )

( define-fun inv-f( ( a Int )( i Int )( n Int )( sn Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( a Int )( i Int )( n Int )( sn Int )( a_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( i_3 Int )( n_0 Int )( sn_0 Int )( sn_1 Int )( sn_2 Int )( sn_3 Int ) ) Bool
	( and
		( = i i_1 )
		( = n n_0 )
		( = sn sn_1 )
		( > n_0 0 )
		( = sn_1 0 )
		( = i_1 0 )
	)
)

( define-fun trans-f ( ( a Int )( i Int )( n Int )( sn Int )( a! Int )( i! Int )( n! Int )( sn! Int )( a_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( i_3 Int )( n_0 Int )( sn_0 Int )( sn_1 Int )( sn_2 Int )( sn_3 Int ) ) Bool
	( or
		( and
			( = i_2 i )
			( = sn_2 sn )
			( = i_2 i! )
			( = sn_2 sn! )
			( = n n_0 )
			( = n! n_0 )
			( = a a! )
			( = sn sn! )
		)
		( and
			( = i_2 i )
			( = sn_2 sn )
			( < i_2 n_0 )
			( = sn_3 ( + sn_2 a_0 ) )
			( = i_3 ( + i_2 1 ) )
			( = i_3 i! )
			( = sn_3 sn! )
			(= a a_0 )
			(= a! a_0 )
			(= n n_0 )
			(= n! n_0 )
		)
	)
)

( define-fun post-f ( ( a Int )( i Int )( n Int )( sn Int )( a_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( i_3 Int )( n_0 Int )( sn_0 Int )( sn_1 Int )( sn_2 Int )( sn_3 Int ) ) Bool
	( and
		( or
			( not
				( and
					( = a a_0 )
					( = i i_2)
					( = n n_0)
					( = sn sn_2)
				)
			)
			( not
				( and
					( not ( < i_2 n_0 ) )
					( = sn_2 ( * n_0 a_0 ) )
					( not ( or ( = sn_2 ( * n_0 a_0 ) ) ( = sn_2 0 ) ) )
				)
			)
		)
		( or
			( not
				( and
					( = a a_0 )
					( = i i_2)
					( = n n_0)
					( = sn sn_2)
				)
			)
			( not
				( and
					( not ( < i_2 n_0 ) )
					( not ( = sn_2 ( * n_0 a_0 ) ) )
					( not ( or ( = sn_2 ( * n_0 a_0 ) ) ( = sn_2 0 ) ) )
				)
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f a i n sn a_0 i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3  )
		( inv-f a i n sn )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f a i n sn )
			( trans-f a i n sn a! i! n! sn! a_0 i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3 )
		)
		( inv-f a! i! n! sn! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f a i n sn  )
		( post-f a i n sn a_0 i_0 i_1 i_2 i_3 n_0 sn_0 sn_1 sn_2 sn_3 )
	)
))

