(set-logic LIA)

( declare-const a Int )
( declare-const a! Int )
( declare-const b Int )
( declare-const b! Int )
( declare-const i Int )
( declare-const i! Int )
( declare-const product Int )
( declare-const product! Int )

( declare-const a_0 Int )
( declare-const b_0 Int )
( declare-const i_0 Int )
( declare-const i_1 Int )
( declare-const i_2 Int )
( declare-const product_0 Int )
( declare-const product_1 Int )
( declare-const product_2 Int )

( define-fun inv-f( ( a Int )( b Int )( i Int )( product Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( a Int )( b Int )( i Int )( product Int )( a_0 Int )( b_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( product_0 Int )( product_1 Int )( product_2 Int ) ) Bool
	( and
		( = a a_0 )
		( = b b_0 )
		( = i i_0 )
		( = product product_0 )
		( = product_0 0 )
		( = i_0 0 )
		( > a_0 0 )
		( > b_0 0 )
	)
)

( define-fun trans-f ( ( a Int )( b Int )( i Int )( product Int )( a! Int )( b! Int )( i! Int )( product! Int )( a_0 Int )( b_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( product_0 Int )( product_1 Int )( product_2 Int ) ) Bool
	( or
		( and
			( = i_1 i )
			( = product_1 product )
			( = i_1 i! )
			( = product_1 product! )
			( = b b_0 )
			( = b! b_0 )
			( = a a! )
			( = product product! )
		)
		( and
			( = i_1 i )
			( = product_1 product )
			( < i_1 b_0 )
			( = product_2 ( + product_1 a_0 ) )
			( = i_2 ( + i_1 1 ) )
			( = i_2 i! )
			( = product_2 product! )
			(= a a_0 )
			(= a! a_0 )
			(= b b_0 )
			(= b! b_0 )
		)
	)
)

( define-fun post-f ( ( a Int )( b Int )( i Int )( product Int )( a_0 Int )( b_0 Int )( i_0 Int )( i_1 Int )( i_2 Int )( product_0 Int )( product_1 Int )( product_2 Int ) ) Bool
	( or
		( not
			( and
				( = a a_0)
				( = b b_0)
				( = i i_1)
				( = product product_1)
			)
		)
		( not
			( and
				( not ( < i_1 b_0 ) )
				( not ( = ( * product_1 product_1 ) ( * ( * a_0 b_0 ) ( * a_0 b_0 ) ) ) )
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f a b i product a_0 b_0 i_0 i_1 i_2 product_0 product_1 product_2  )
		( inv-f a b i product )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f a b i product )
			( trans-f a b i product a! b! i! product! a_0 b_0 i_0 i_1 i_2 product_0 product_1 product_2 )
		)
		( inv-f a! b! i! product! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f a b i product  )
		( post-f a b i product a_0 b_0 i_0 i_1 i_2 product_0 product_1 product_2 )
	)
))

