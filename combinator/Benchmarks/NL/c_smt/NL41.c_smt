(set-logic LIA)

( declare-const X Int )
( declare-const X! Int )
( declare-const Y Int )
( declare-const Y! Int )
( declare-const v Int )
( declare-const v! Int )
( declare-const x Int )
( declare-const x! Int )
( declare-const y Int )
( declare-const y! Int )

( declare-const X_0 Int )
( declare-const Y_0 Int )
( declare-const v_0 Int )
( declare-const v_1 Int )
( declare-const v_2 Int )
( declare-const v_3 Int )
( declare-const v_4 Int )
( declare-const v_5 Int )
( declare-const x_0 Int )
( declare-const x_1 Int )
( declare-const x_2 Int )
( declare-const x_3 Int )
( declare-const y_0 Int )
( declare-const y_1 Int )
( declare-const y_2 Int )
( declare-const y_3 Int )
( declare-const y_4 Int )

( define-fun inv-f( ( X Int )( Y Int )( v Int )( x Int )( y Int ) ) Bool
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
)

( define-fun pre-f ( ( X Int )( Y Int )( v Int )( x Int )( y Int )( X_0 Int )( Y_0 Int )( v_0 Int )( v_1 Int )( v_2 Int )( v_3 Int )( v_4 Int )( v_5 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( y_4 Int ) ) Bool
	( and
		( = X X_0 )
		( = Y Y_0 )
		( = v v_1 )
		( = x x_1 )
		( = y y_1 )
		( > X_0 0 )
		( > Y_0 0 )
		( >= X_0 Y_0 )
		( = v_1 ( - ( * 2 Y_0 ) X_0 ) )
		( = y_1 0 )
		( = x_1 0 )
	)
)

( define-fun trans-f ( ( X Int )( Y Int )( v Int )( x Int )( y Int )( X! Int )( Y! Int )( v! Int )( x! Int )( y! Int )( X_0 Int )( Y_0 Int )( v_0 Int )( v_1 Int )( v_2 Int )( v_3 Int )( v_4 Int )( v_5 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( y_4 Int ) ) Bool
	( or
		( and
			( = v_2 v )
			( = x_2 x )
			( = y_2 y )
			( = v_2 v! )
			( = x_2 x! )
			( = y_2 y! )
			( = X X_0 )
			( = X! X_0 )
			( = Y Y! )
			( = v v! )
			( = y y! )
		)
		( and
			( = v_2 v )
			( = x_2 x )
			( = y_2 y )
			( <= x_2 X_0 )
			( < v_2 0 )
			( = v_3 ( + v_2 ( * 2 Y_0 ) ) )
			( = v_4 v_3 )
			( = y_3 y_2 )
			( = x_3 ( + x_2 1 ) )
			( = v_4 v! )
			( = x_3 x! )
			( = y_3 y! )
			(= X X_0 )
			(= X! X_0 )
			(= Y Y_0 )
			(= Y! Y_0 )
		)
		( and
			( = v_2 v )
			( = x_2 x )
			( = y_2 y )
			( <= x_2 X_0 )
			( not ( < v_2 0 ) )
			( = v_5 ( + v_2 ( * 2 ( - Y_0 X_0 ) ) ) )
			( = y_4 ( + y_2 1 ) )
			( = v_4 v_5 )
			( = y_3 y_4 )
			( = x_3 ( + x_2 1 ) )
			( = v_4 v! )
			( = x_3 x! )
			( = y_3 y! )
			(= X X_0 )
			(= X! X_0 )
			(= Y Y_0 )
			(= Y! Y_0 )
		)
	)
)

( define-fun post-f ( ( X Int )( Y Int )( v Int )( x Int )( y Int )( X_0 Int )( Y_0 Int )( v_0 Int )( v_1 Int )( v_2 Int )( v_3 Int )( v_4 Int )( v_5 Int )( x_0 Int )( x_1 Int )( x_2 Int )( x_3 Int )( y_0 Int )( y_1 Int )( y_2 Int )( y_3 Int )( y_4 Int ) ) Bool
	( or
		( not
			( and
				( = X X_0)
				( = Y Y_0)
				( = v v_2)
				( = x x_2)
				( = y y_2)
			)
		)
		( not
			( and
				( not ( <= x_2 X_0 ) )
				( not ( = ( + ( - ( + ( - ( - ( * ( * 2 Y_0 ) x_2 ) ( * ( * 2 x_2 ) y_2 ) ) X_0 ) ( * 2 Y_0 ) ) v_2 ) ( * 2 y_2 ) ) 0 ) )
			)
		)
	)
)
SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( pre-f X Y v x y X_0 Y_0 v_0 v_1 v_2 v_3 v_4 v_5 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 y_4  )
		( inv-f X Y v x y )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( and
			( inv-f X Y v x y )
			( trans-f X Y v x y X! Y! v! x! y! X_0 Y_0 v_0 v_1 v_2 v_3 v_4 v_5 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 y_4 )
		)
		( inv-f X! Y! v! x! y! )
	)
))

SPLIT_HERE_asdfghjklzxcvbnmqwertyuiop
( assert ( not
	( =>
		( inv-f X Y v x y  )
		( post-f X Y v x y X_0 Y_0 v_0 v_1 v_2 v_3 v_4 v_5 x_0 x_1 x_2 x_3 y_0 y_1 y_2 y_3 y_4 )
	)
))

